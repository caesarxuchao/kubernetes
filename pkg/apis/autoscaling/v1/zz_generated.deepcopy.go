// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v1

import (
	reflect "reflect"

	"k8s.io/api/autoscaling/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	SchemeBuilder.Register(RegisterDeepCopies)
}

// RegisterDeepCopies adds deep-copy functions to the given scheme. Public
// to allow building arbitrary schemes.
func RegisterDeepCopies(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedDeepCopyFuncs(
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_CrossVersionObjectReference, InType: reflect.TypeOf(&v1.CrossVersionObjectReference{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_HorizontalPodAutoscaler, InType: reflect.TypeOf(&v1.HorizontalPodAutoscaler{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_HorizontalPodAutoscalerList, InType: reflect.TypeOf(&v1.HorizontalPodAutoscalerList{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_HorizontalPodAutoscalerSpec, InType: reflect.TypeOf(&v1.HorizontalPodAutoscalerSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_HorizontalPodAutoscalerStatus, InType: reflect.TypeOf(&v1.HorizontalPodAutoscalerStatus{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_MetricSpec, InType: reflect.TypeOf(&v1.MetricSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_MetricStatus, InType: reflect.TypeOf(&v1.MetricStatus{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ObjectMetricSource, InType: reflect.TypeOf(&v1.ObjectMetricSource{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ObjectMetricStatus, InType: reflect.TypeOf(&v1.ObjectMetricStatus{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodsMetricSource, InType: reflect.TypeOf(&v1.PodsMetricSource{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_PodsMetricStatus, InType: reflect.TypeOf(&v1.PodsMetricStatus{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ResourceMetricSource, InType: reflect.TypeOf(&v1.ResourceMetricSource{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ResourceMetricStatus, InType: reflect.TypeOf(&v1.ResourceMetricStatus{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_Scale, InType: reflect.TypeOf(&v1.Scale{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ScaleSpec, InType: reflect.TypeOf(&v1.ScaleSpec{})},
		conversion.GeneratedDeepCopyFunc{Fn: DeepCopy_v1_ScaleStatus, InType: reflect.TypeOf(&v1.ScaleStatus{})},
	)
}

func DeepCopy_v1_CrossVersionObjectReference(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.CrossVersionObjectReference)
		out := out.(*v1.CrossVersionObjectReference)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_HorizontalPodAutoscaler(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.HorizontalPodAutoscaler)
		out := out.(*v1.HorizontalPodAutoscaler)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*meta_v1.ObjectMeta)
		}
		if err := DeepCopy_v1_HorizontalPodAutoscalerSpec(&in.Spec, &out.Spec, c); err != nil {
			return err
		}
		if err := DeepCopy_v1_HorizontalPodAutoscalerStatus(&in.Status, &out.Status, c); err != nil {
			return err
		}
		return nil
	}
}

func DeepCopy_v1_HorizontalPodAutoscalerList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.HorizontalPodAutoscalerList)
		out := out.(*v1.HorizontalPodAutoscalerList)
		*out = *in
		if in.Items != nil {
			in, out := &in.Items, &out.Items
			*out = make([]v1.HorizontalPodAutoscaler, len(*in))
			for i := range *in {
				if err := DeepCopy_v1_HorizontalPodAutoscaler(&(*in)[i], &(*out)[i], c); err != nil {
					return err
				}
			}
		}
		return nil
	}
}

func DeepCopy_v1_HorizontalPodAutoscalerSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.HorizontalPodAutoscalerSpec)
		out := out.(*v1.HorizontalPodAutoscalerSpec)
		*out = *in
		if in.MinReplicas != nil {
			in, out := &in.MinReplicas, &out.MinReplicas
			*out = new(int32)
			**out = **in
		}
		if in.TargetCPUUtilizationPercentage != nil {
			in, out := &in.TargetCPUUtilizationPercentage, &out.TargetCPUUtilizationPercentage
			*out = new(int32)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_v1_HorizontalPodAutoscalerStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.HorizontalPodAutoscalerStatus)
		out := out.(*v1.HorizontalPodAutoscalerStatus)
		*out = *in
		if in.ObservedGeneration != nil {
			in, out := &in.ObservedGeneration, &out.ObservedGeneration
			*out = new(int64)
			**out = **in
		}
		if in.LastScaleTime != nil {
			in, out := &in.LastScaleTime, &out.LastScaleTime
			*out = new(meta_v1.Time)
			**out = (*in).DeepCopy()
		}
		if in.CurrentCPUUtilizationPercentage != nil {
			in, out := &in.CurrentCPUUtilizationPercentage, &out.CurrentCPUUtilizationPercentage
			*out = new(int32)
			**out = **in
		}
		return nil
	}
}

func DeepCopy_v1_MetricSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.MetricSpec)
		out := out.(*v1.MetricSpec)
		*out = *in
		if in.Object != nil {
			in, out := &in.Object, &out.Object
			*out = new(v1.ObjectMetricSource)
			if err := DeepCopy_v1_ObjectMetricSource(*in, *out, c); err != nil {
				return err
			}
		}
		if in.Pods != nil {
			in, out := &in.Pods, &out.Pods
			*out = new(v1.PodsMetricSource)
			if err := DeepCopy_v1_PodsMetricSource(*in, *out, c); err != nil {
				return err
			}
		}
		if in.Resource != nil {
			in, out := &in.Resource, &out.Resource
			*out = new(v1.ResourceMetricSource)
			if err := DeepCopy_v1_ResourceMetricSource(*in, *out, c); err != nil {
				return err
			}
		}
		return nil
	}
}

func DeepCopy_v1_MetricStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.MetricStatus)
		out := out.(*v1.MetricStatus)
		*out = *in
		if in.Object != nil {
			in, out := &in.Object, &out.Object
			*out = new(v1.ObjectMetricStatus)
			if err := DeepCopy_v1_ObjectMetricStatus(*in, *out, c); err != nil {
				return err
			}
		}
		if in.Pods != nil {
			in, out := &in.Pods, &out.Pods
			*out = new(v1.PodsMetricStatus)
			if err := DeepCopy_v1_PodsMetricStatus(*in, *out, c); err != nil {
				return err
			}
		}
		if in.Resource != nil {
			in, out := &in.Resource, &out.Resource
			*out = new(v1.ResourceMetricStatus)
			if err := DeepCopy_v1_ResourceMetricStatus(*in, *out, c); err != nil {
				return err
			}
		}
		return nil
	}
}

func DeepCopy_v1_ObjectMetricSource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.ObjectMetricSource)
		out := out.(*v1.ObjectMetricSource)
		*out = *in
		out.TargetValue = in.TargetValue.DeepCopy()
		return nil
	}
}

func DeepCopy_v1_ObjectMetricStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.ObjectMetricStatus)
		out := out.(*v1.ObjectMetricStatus)
		*out = *in
		out.CurrentValue = in.CurrentValue.DeepCopy()
		return nil
	}
}

func DeepCopy_v1_PodsMetricSource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.PodsMetricSource)
		out := out.(*v1.PodsMetricSource)
		*out = *in
		out.TargetAverageValue = in.TargetAverageValue.DeepCopy()
		return nil
	}
}

func DeepCopy_v1_PodsMetricStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.PodsMetricStatus)
		out := out.(*v1.PodsMetricStatus)
		*out = *in
		out.CurrentAverageValue = in.CurrentAverageValue.DeepCopy()
		return nil
	}
}

func DeepCopy_v1_ResourceMetricSource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.ResourceMetricSource)
		out := out.(*v1.ResourceMetricSource)
		*out = *in
		if in.TargetAverageUtilization != nil {
			in, out := &in.TargetAverageUtilization, &out.TargetAverageUtilization
			*out = new(int32)
			**out = **in
		}
		if in.TargetAverageValue != nil {
			in, out := &in.TargetAverageValue, &out.TargetAverageValue
			*out = new(resource.Quantity)
			**out = (*in).DeepCopy()
		}
		return nil
	}
}

func DeepCopy_v1_ResourceMetricStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.ResourceMetricStatus)
		out := out.(*v1.ResourceMetricStatus)
		*out = *in
		if in.CurrentAverageUtilization != nil {
			in, out := &in.CurrentAverageUtilization, &out.CurrentAverageUtilization
			*out = new(int32)
			**out = **in
		}
		out.CurrentAverageValue = in.CurrentAverageValue.DeepCopy()
		return nil
	}
}

func DeepCopy_v1_Scale(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.Scale)
		out := out.(*v1.Scale)
		*out = *in
		if newVal, err := c.DeepCopy(&in.ObjectMeta); err != nil {
			return err
		} else {
			out.ObjectMeta = *newVal.(*meta_v1.ObjectMeta)
		}
		return nil
	}
}

func DeepCopy_v1_ScaleSpec(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.ScaleSpec)
		out := out.(*v1.ScaleSpec)
		*out = *in
		return nil
	}
}

func DeepCopy_v1_ScaleStatus(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*v1.ScaleStatus)
		out := out.(*v1.ScaleStatus)
		*out = *in
		return nil
	}
}
